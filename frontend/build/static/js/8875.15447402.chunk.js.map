{"version":3,"file":"static/js/8875.15447402.chunk.js","mappings":"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","sources":["pages/Dashboards/AdminDashboard/CompetitionEvents.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { FaCalendarAlt, FaMapMarkerAlt, FaClock, FaListAlt ,FaArrowRight } from \"react-icons/fa\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n\r\nconst CompetitionEvents = () => {\r\n  const { competition_name } = useParams() || {};\r\n  const formattedEventName = competition_name ? competition_name.replace(/_/g, \" \").toUpperCase() : \"UNKNOWN EVENT\";\r\n  const [events, setEvents] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n\r\n  const token = localStorage.getItem(\"access_token\");\r\n\r\n const getEventStatus = (startDate, endDate) => {\r\n    const now = new Date();\r\n    const start = new Date(startDate);\r\n    const end = new Date(endDate);\r\n    \r\n    if (!startDate || !endDate) return 'TBD';\r\n    \r\n    if (now < start) return 'Upcoming';\r\n    if (now >= start && now <= end) return 'Ongoing';\r\n    if (now > end) return 'Completed';\r\n  };\r\n\r\n  \r\n  useEffect(() => {\r\n    const fetchEvents = async () => {\r\n      const apiUrl = `${process.env.REACT_APP_API_URL}/competition/${competition_name}/event/`;\r\n      try {\r\n        const response = await axios.get(apiUrl, {\r\n        });\r\n        setEvents(response.data);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        setError(\"Failed to fetch events. Please try again.\");\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchEvents();\r\n  }, [competition_name]);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex justify-center items-center min-h-screen\">\r\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-cyan-600\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"p-4 mb-4 text-sm text-red-700 bg-red-100 rounded-lg text-center mt-8\" role=\"alert\">\r\n        {error}\r\n      </div>\r\n    );\r\n  }\r\n\r\n   const handleCompetitionClick = (event_name) => {\r\n    navigate(`/Dashboard/Competitions/${competition_name}/${event_name}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      <h2 className=\"mb-8 text-center text-4xl font-bold bg-gradient-to-r from-cyan-600 to-cyan-800 bg-clip-text text-transparent\">\r\n        {formattedEventName} EVENTS\r\n      </h2>\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n        {events.length > 0 ? (\r\n          events.map((event, index) => {\r\n            const status = getEventStatus(event.start_date, event.end_date);\r\n            const statusColors = {\r\n              Upcoming: 'bg-cyan-100 text-cyan-800',\r\n              Ongoing: 'bg-orange-100 text-orange-800',\r\n              Completed: 'bg-green-100 text-green-800',\r\n              TBD: 'bg-gray-100 text-gray-800'\r\n            };\r\n\r\n            return (\r\n              <div\r\n                key={index}\r\n                className=\"relative bg-white rounded-xl shadow-lg hover:shadow-xl transition-shadow duration-300 group\"\r\n              >\r\n              <div className=\"p-6\">\r\n                <div className=\"flex items-center mb-4\">\r\n                  <div className=\"flex-shrink-0 flex items-center justify-center w-12 h-12 bg-cyan-100 rounded-lg\">\r\n                    <FaListAlt className=\"w-6 h-6 text-cyan-600\" />\r\n                  </div>\r\n                  <div className=\"ml-4\">\r\n                    <h3 className=\"text-xl font-semibold text-gray-800\">{event.name || \"N/A\"}</h3>\r\n                    <span className=\"text-sm text-cyan-600 font-medium\">Event #{index + 1}</span>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"space-y-3\">\r\n                  <div className=\"flex items-center\">\r\n                    <FaCalendarAlt className=\"w-5 h-5 text-gray-500 mr-2\" />\r\n                    <span className=\"text-sm text-gray-600\">\r\n                      {event.start_date || \"TBD\"} - {event.end_date || \"TBD\"}\r\n                    </span>\r\n                  </div>\r\n\r\n                  <div className=\"flex items-center\">\r\n                    <FaMapMarkerAlt className=\"w-5 h-5 text-gray-500 mr-2\" />\r\n                    <span className=\"text-sm text-gray-600\">{event.location || \"Location not specified\"}</span>\r\n                  </div>\r\n\r\n                  {event.description && (\r\n                    <p className=\"text-sm text-gray-500 mt-3 line-clamp-3\">{event.description}</p>\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"px-6 py-3 bg-gray-50 rounded-b-xl border-t border-gray-100\">\r\n                  <div className=\"flex items-center justify-between text-sm\">\r\n                    <span className={`px-3 py-1 rounded-full text-xs font-medium ${\r\n                      statusColors[status] || 'bg-gray-100 text-gray-800'\r\n                    }`}>\r\n                      {status}\r\n                    </span>\r\n                    <button className=\"text-cyan-600 hover:text-cyan-700 font-medium flex items-center\"\r\n                      onClick={() => handleCompetitionClick(event.name)}> \r\n                    View Details\r\n                      <svg\r\n                      className=\"w-4 h-4 ml-1\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                    >\r\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\r\n                    </svg>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n         );\r\n          })\r\n        ) : (\r\n          <div className=\"col-span-full text-center py-12\">\r\n            <div className=\"text-gray-500 text-lg mb-4\">No events found</div>\r\n            <svg\r\n              className=\"w-24 h-24 mx-auto text-gray-300\"\r\n              fill=\"none\"\r\n              stroke=\"currentColor\"\r\n              viewBox=\"0 0 24 24\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth={1.5}\r\n                d=\"M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n              />\r\n            </svg>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CompetitionEvents;\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { Link, useParams } from \"react-router-dom\";\r\n// import axios from \"axios\";\r\n\r\n\r\n\r\n// const CompetitionEvents = () => {\r\n// const { event_name } = useParams() || {};  // Ensure destructuring doesn't break\r\n//   const formattedEventName = event_name ? event_name.replace(/_/g, \" \").toUpperCase() : \"UNKNOWN EVENT\";\r\n//   const [events, setEvents] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   const token = localStorage.getItem(\"access_token\");\r\n\r\n//   useEffect(() => {\r\n//     const fetchEvents = async () => {\r\n//   const apiUrl = `${process.env.REACT_APP_API_URL}/admin/${event_name}/event-list/`;\r\n//     try {\r\n//       const response = await axios.get(apiUrl, {\r\n//         headers: { Authorization: `Bearer ${token}` },\r\n//       });\r\n//       setEvents(response.data);\r\n//       setLoading(false);\r\n//     } catch (err) {\r\n//       setError(\"Failed to fetch events. Please try again.\");\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n\r\n//     fetchEvents();\r\n//   }, [event_name, token]);\r\n\r\n//   if (loading) {\r\n//     return <div className=\"text-center \">Loading...</div>;\r\n//   }\r\n\r\n//   if (error) {\r\n//     return <div className=\"text-red-600 text-center mt-8\">{error}</div>;\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"container mx-auto px-4\">\r\n//       <h2 className=\"mb-4 tracking-tight text-center bg-clip-text text-transparent bg-gradient-to-r from-cyan-950 to-cyan-500 text-5xl font-black\">\r\n//         {formattedEventName} EVENTS\r\n//       </h2>\r\n\r\n//       <div className=\"grid grid-cols-1 gap-6\">\r\n//         {events.length > 0 ? (\r\n//           events.map((event, index) => (\r\n//             <div\r\n//               key={index}\r\n//               className=\"bg-white shadow overflow-hidden sm:rounded-lg p-4\"\r\n//             >\r\n//               <h3 className=\"text-lg leading-6 font-medium text-gray-900 mb-2\">\r\n//                 Event {index + 1}\r\n//               </h3>\r\n//               <p className=\"text-sm text-gray-500 mb-2\">\r\n//                 Event Name: {event.name || \"N/A\"}\r\n//               </p>\r\n//               <p className=\"text-sm text-gray-500 mb-2\">\r\n//                 Start Date: {event.start_date || \"N/A\"}\r\n//               </p>\r\n//               <p className=\"text-sm text-gray-500 mb-2\">\r\n//                 End Date: {event.end_date || \"N/A\"}\r\n//               </p>\r\n//               <p className=\"text-sm text-gray-500 mb-2\">\r\n//                 Location: {event.location || \"N/A\"}\r\n//               </p>\r\n\r\n              \r\n//             </div>\r\n//           ))\r\n//         ) : (\r\n//           <p className=\"text-center col-span-full\">No events found.</p>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default CompetitionEvents;\r\n\r\n\r\n\r\n// {event.top3_teams?.length > 0 ? (\r\n//                 <div className=\"mt-4\">\r\n//                   <h4 className=\"text-md font-medium text-gray-700\">Top 3 Teams:</h4>\r\n//                   <ul className=\"list-disc list-inside\">\r\n//                     {event.top3_teams.map((team, teamIndex) => (\r\n//                       <li key={teamIndex} className=\"text-sm text-gray-600\">\r\n//                         {Object.entries(team).map(([key, value]) => (\r\n//                           <div key={key}>{key}: {value}</div>\r\n//                         ))}\r\n//                       </li>\r\n//                     ))}\r\n//                   </ul>\r\n//                 </div>\r\n//               ) : (\r\n//                 <p className=\"text-sm text-gray-500 mt-4\">\r\n//                   No top teams available.\r\n//                 </p>\r\n//               )}"],"names":["CompetitionEvents","competition_name","useParams","formattedEventName","replace","toUpperCase","events","setEvents","useState","loading","setLoading","error","setError","navigate","useNavigate","localStorage","getItem","useEffect","async","apiUrl","response","axios","get","data","err","fetchEvents","_jsx","className","children","role","_jsxs","length","map","event","index","status","getEventStatus","startDate","endDate","now","Date","start","end","start_date","end_date","FaListAlt","name","FaCalendarAlt","FaMapMarkerAlt","location","description","Upcoming","Ongoing","Completed","TBD","onClick","handleCompetitionClick","event_name","fill","stroke","viewBox","xmlns","strokeLinecap","strokeLinejoin","strokeWidth","d"],"sourceRoot":""}