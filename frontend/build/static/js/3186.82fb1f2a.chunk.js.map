{"version":3,"file":"static/js/3186.82fb1f2a.chunk.js","mappings":"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","sources":["pages/Dashboards/View/LiveSkills.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import { FaTrophy, FaMedal } from \"react-icons/fa\";\r\n\r\n// const LiveSkills = () => {\r\n//   const [rankings, setRankings] = useState([]);\r\n//   const [scores, setScores] = useState({});\r\n//   const [expandedRounds, setExpandedRounds] = useState({});\r\n//   const [lastUpdate, setLastUpdate] = useState(new Date());\r\n\r\n//   // Function to load data from localStorage\r\n//   const loadData = () => {\r\n//     const savedRankings = JSON.parse(localStorage.getItem(\"skillsRankingTable\")) || [];\r\n//     const savedScores = JSON.parse(localStorage.getItem(\"skillsScores\")) || {};\r\n//     const savedExpanded = JSON.parse(localStorage.getItem(\"skillsExpandedRounds\")) || {};\r\n\r\n//     setRankings(savedRankings);\r\n//     setScores(savedScores);\r\n//     setExpandedRounds(savedExpanded);\r\n//     setLastUpdate(new Date());\r\n//   };\r\n\r\n//   // Load data initially and set up auto-refresh\r\n//   useEffect(() => {\r\n//     loadData();\r\n//     const interval = setInterval(loadData, 5000); // Refresh every 5 seconds\r\n\r\n//     return () => clearInterval(interval);\r\n//   }, []);\r\n\r\n//   // Get medal icon based on rank\r\n//   const getMedalIcon = (rank) => {\r\n//     switch (rank) {\r\n//       case 1:\r\n//         return <FaMedal className=\"text-yellow-400 text-xl\" />;\r\n//       case 2:\r\n//         return <FaMedal className=\"text-gray-400 text-xl\" />;\r\n//       case 3:\r\n//         return <FaMedal className=\"text-yellow-700 text-xl\" />;\r\n//       default:\r\n//         return null;\r\n//     }\r\n//   };\r\n\r\n//   // Add this new function to get team scores for a specific round\r\n//   const getTeamScoresForRound = (round, teamId) => {\r\n//     const roundScores = scores[round]?.[teamId] || { auto: 0, driver: 0 };\r\n//     return {\r\n//       auto: roundScores.auto || 0,\r\n//       driver: roundScores.driver || 0,\r\n//       total: (roundScores.auto || 0) + (roundScores.driver || 0)\r\n//     };\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"p-4 max-w-7xl mx-auto\">\r\n//       {/* Header with last update time */}\r\n//       <div className=\"text-center mb-6\">\r\n//         <h1 className=\"text-3xl font-bold text-gray-800 mb-2\">Live Skills Matches</h1>\r\n//         <p className=\"text-sm text-gray-600\">\r\n//           Last updated: {lastUpdate.toLocaleTimeString()}\r\n//         </p>\r\n//       </div>\r\n\r\n//       {/* Rankings Table */}\r\n//       <div className=\"mb-8\">\r\n//         <div className=\"bg-white rounded-lg shadow-lg p-6\">\r\n//           <h2 className=\"text-2xl font-bold text-center mb-4 flex items-center justify-center gap-2\">\r\n//             <FaTrophy className=\"text-yellow-500\" />\r\n//             Current Rankings\r\n//           </h2>\r\n//           <div className=\"overflow-x-auto\">\r\n//             <table className=\"w-full\">\r\n//               <thead>\r\n//                 <tr className=\"bg-gray-800 text-white\">\r\n//                   <th className=\"py-3 px-4 text-left rounded-tl-lg\">Rank</th>\r\n//                   <th className=\"py-3 px-4 text-left\">Team</th>\r\n//                   <th className=\"py-3 px-4 text-center\">Matches</th>\r\n//                   <th className=\"py-3 px-4 text-center\">Avg Auto</th>\r\n//                   <th className=\"py-3 px-4 text-center\">Avg Driver</th>\r\n//                   <th className=\"py-3 px-4 text-center rounded-tr-lg\">Total</th>\r\n//                 </tr>\r\n//               </thead>\r\n//               <tbody>\r\n//                 {rankings.map((team) => (\r\n//                   <tr\r\n//                     key={team.id}\r\n//                     className={`border-b ${\r\n//                       team.style === \"gold\"\r\n//                         ? \"bg-yellow-100\"\r\n//                         : team.style === \"silver\"\r\n//                         ? \"bg-gray-100\"\r\n//                         : team.style === \"bronze\"\r\n//                         ? \"bg-yellow-50\"\r\n//                         : \"bg-white\"\r\n//                     } hover:bg-gray-50 transition-colors`}\r\n//                   >\r\n//                     <td className=\"py-3 px-4 flex items-center gap-2\">\r\n//                       {getMedalIcon(team.rank)}\r\n//                       {team.rank}\r\n//                     </td>\r\n//                     <td className=\"py-3 px-4 font-medium\">{team.name}</td>\r\n//                     <td className=\"py-3 px-4 text-center\">{team.matchesPlayed}</td>\r\n//                     <td className=\"py-3 px-4 text-center\">{team.autoAvg}</td>\r\n//                     <td className=\"py-3 px-4 text-center\">{team.driverAvg}</td>\r\n//                     <td className=\"py-3 px-4 text-center font-bold\">{team.total}</td>\r\n//                   </tr>\r\n//                 ))}\r\n//               </tbody>\r\n//             </table>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* All Rounds Grid */}\r\n//       <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n//         {[1, 2, 3].map((round) => (\r\n//           <div key={round} className=\"bg-white rounded-lg shadow-lg p-6\">\r\n//             <h3 className=\"text-xl font-bold mb-4 text-center\">\r\n//               Round {round}\r\n//               {scores[round] && Object.keys(scores[round]).length > 0 && (\r\n//                 <span className=\"ml-2 text-sm text-green-500\">● Live</span>\r\n//               )}\r\n//             </h3>\r\n//             <div className=\"overflow-x-auto\">\r\n//               <table className=\"w-full\">\r\n//                 <thead>\r\n//                   <tr className=\"bg-gray-100\">\r\n//                     <th className=\"py-2 px-3 text-left text-sm\">Team</th>\r\n//                     <th className=\"py-2 px-3 text-center text-sm\">Auto</th>\r\n//                     <th className=\"py-2 px-3 text-center text-sm\">Driver</th>\r\n//                     <th className=\"py-2 px-3 text-center text-sm\">Total</th>\r\n//                   </tr>\r\n//                 </thead>\r\n//                 <tbody>\r\n//                   {rankings.map((team) => {\r\n//                     const roundScores = getTeamScoresForRound(round, team.id);\r\n//                     return (\r\n//                       <tr key={team.id} className=\"border-b hover:bg-gray-50\">\r\n//                         <td className=\"py-2 px-3 text-sm\">{team.name}</td>\r\n//                         <td className=\"py-2 px-3 text-center text-sm\">\r\n//                           {roundScores.auto > 0 ? (\r\n//                             <span className=\"text-green-600 font-medium\">{roundScores.auto}</span>\r\n//                           ) : (\r\n//                             <span className=\"text-gray-400\">-</span>\r\n//                           )}\r\n//                         </td>\r\n//                         <td className=\"py-2 px-3 text-center text-sm\">\r\n//                           {roundScores.driver > 0 ? (\r\n//                             <span className=\"text-blue-600 font-medium\">{roundScores.driver}</span>\r\n//                           ) : (\r\n//                             <span className=\"text-gray-400\">-</span>\r\n//                           )}\r\n//                         </td>\r\n//                         <td className=\"py-2 px-3 text-center text-sm font-bold\">\r\n//                           {roundScores.total > 0 ? roundScores.total : \"-\"}\r\n//                         </td>\r\n//                       </tr>\r\n//                     );\r\n//                   })}\r\n//                 </tbody>\r\n//               </table>\r\n//             </div>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default LiveSkills;\r\n\r\n\r\n// import React, { useEffect, useState, useRef } from \"react\";\r\n// import { FaTrophy, FaMedal } from \"react-icons/fa\";\r\n\r\n// const LiveSkills = () => {\r\n//   const [rankings, setRankings] = useState([]);\r\n//   const [scores, setScores] = useState({});\r\n//   const [expandedRounds, setExpandedRounds] = useState({});\r\n//   const [lastUpdate, setLastUpdate] = useState(new Date());\r\n//   const [matches, setMatches] = useState([]);\r\n//   const [teams, setTeams] = useState([]);\r\n//   const socketRef = useRef(null);\r\n//   const eventName = localStorage.getItem('selected_event_name');\r\n \r\n//  useEffect(() => {\r\n//     // Initialize WebSocket connection\r\n//     socketRef.current = new WebSocket(`ws://${process.env.REACT_APP_API_HOST}/ws/competition_event/${eventName}/`);\r\n\r\n//     socketRef.current.onopen = () => {\r\n//       console.log(\"WebSocket connection established\");\r\n//     };\r\n\r\n//     socketRef.current.onmessage = (event) => {\r\n//       const data = JSON.parse(event.data);\r\n//       console.log(\"Score Update:\", data);\r\n\r\n//       if (data.game_id && data.score !== undefined) {\r\n//         // Update matches with new score\r\n//         setMatches(prevMatches => {\r\n//           const matchIndex = prevMatches.findIndex(m => m.code === data.game_id);\r\n//           if (matchIndex === -1) {\r\n//             // Add new match if it doesn't exist\r\n//             return [...prevMatches, {\r\n//               code: data.game_id,\r\n//               team1: data.team1_name || 'Team 1',\r\n//               team2: data.team2_name || 'Team 2',\r\n//               score: data.score\r\n//             }];\r\n//           }\r\n\r\n//           // Update existing match\r\n//           const updatedMatches = [...prevMatches];\r\n//           updatedMatches[matchIndex] = {\r\n//             ...updatedMatches[matchIndex],\r\n//             score: data.score\r\n//           };\r\n//           return updatedMatches;\r\n//         });\r\n\r\n//         // Update last update time\r\n//         setLastUpdate(new Date());\r\n//       }\r\n//     };\r\n\r\n//     socketRef.current.onerror = (error) => {\r\n//       console.error(\"WebSocket error:\", error);\r\n//     };\r\n\r\n//     socketRef.current.onclose = () => {\r\n//       console.log(\"WebSocket connection closed\");\r\n//     };\r\n\r\n//     // Cleanup WebSocket on unmount\r\n//     return () => {\r\n//       if (socketRef.current) {\r\n//         socketRef.current.close();\r\n//       }\r\n//     };\r\n//   }, [eventName]);\r\n\r\n//   const getMedalIcon = (rank) => {\r\n//     switch (rank) {\r\n//       case 1:\r\n//         return <FaMedal className=\"text-yellow-400 text-xl\" />;\r\n//       case 2:\r\n//         return <FaMedal className=\"text-gray-400 text-xl\" />;\r\n//       case 3:\r\n//         return <FaMedal className=\"text-yellow-700 text-xl\" />;\r\n//       default:\r\n//         return null;\r\n//     }\r\n//   };\r\n//   // Add this new function to get team scores for a specific round\r\n//   const getTeamScoresForRound = (round, teamId) => {\r\n//     const roundScores = scores[round]?.[teamId] || { auto: 0, driver: 0 };\r\n//     return {\r\n//       auto: roundScores.auto || 0,\r\n//       driver: roundScores.driver || 0,\r\n//       total: (roundScores.auto || 0) + (roundScores.driver || 0)\r\n//     };\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"p-4 max-w-7xl mx-auto\">\r\n//       {/* Header with last update time */}\r\n//       <div className=\"text-center mb-6\">\r\n//         <h1 className=\"text-3xl font-bold text-gray-800 mb-2\">Live Skills Matches</h1>\r\n//         <p className=\"text-sm text-gray-600\">\r\n//           Last updated: {lastUpdate.toLocaleTimeString()}\r\n//         </p>\r\n//       </div>\r\n\r\n     \r\n\r\n//       {/* All Rounds Grid */}\r\n//       <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n//         {[1, 2, 3].map((round) => (\r\n//           <div key={round} className=\"bg-white rounded-lg shadow-lg p-6\">\r\n//             <h3 className=\"text-xl font-bold mb-4 text-center\">\r\n//               Round {round}\r\n//               {scores[round] && Object.keys(scores[round]).length > 0 && (\r\n//                 <span className=\"ml-2 text-sm text-green-500\">● Live</span>\r\n//               )}\r\n//             </h3>\r\n//             <div className=\"overflow-x-auto\">\r\n//               <table className=\"w-full\">\r\n//                 <thead>\r\n//                   <tr className=\"bg-gray-100\">\r\n//                     <th className=\"py-2 px-3 text-left text-sm\">Match Code</th>\r\n//                     <th className=\"py-2 px-3 text-left text-sm\">Team</th>\r\n//                     <th className=\"py-2 px-3 text-center text-sm\">Auto</th>\r\n//                     <th className=\"py-2 px-3 text-center text-sm\">Driver</th>\r\n//                     <th className=\"py-2 px-3 text-center text-sm\">Total</th>\r\n//                   </tr>\r\n//                 </thead>\r\n//                <tbody>\r\n//                 {matches.map((team) => {\r\n//                   return (\r\n//                     <tr key={team.code} className=\"border-b hover:bg-gray-50\">\r\n//                       <td className=\"py-2 px-3 text-sm\">{team.code}</td>\r\n//                       <td className=\"py-2 px-3 text-sm\">{team.team1}</td>\r\n//                       <td className=\"py-2 px-3 text-center text-sm\">\r\n//                         {team.score.autonomous > 0 ? (\r\n//                           <span className=\"text-green-600 font-medium\">{team.score.autonomous}</span>\r\n//                         ) : (\r\n//                           <span className=\"text-gray-400\">-</span>\r\n//                         )}\r\n//                       </td>\r\n//                       <td className=\"py-2 px-3 text-center text-sm\">\r\n//                         {team.score.driver > 0 ? (\r\n//                           <span className=\"text-blue-600 font-medium\">{team.score.driver}</span>\r\n//                         ) : (\r\n//                           <span className=\"text-gray-400\">-</span>\r\n//                         )}\r\n//                       </td>\r\n//                       <td className=\"py-2 px-3 text-center text-sm font-bold\">\r\n//                         {team.score.autonomous + team.score.driver > 0\r\n//                           ? team.score.autonomous + team.score.driver\r\n//                           : \"-\"}\r\n//                       </td>\r\n//                     </tr>\r\n//                   );\r\n//                 })}\r\n//               </tbody>\r\n//               </table>\r\n//             </div>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default LiveSkills;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport { FaTrophy, FaMedal } from \"react-icons/fa\";\r\nimport axios from \"axios\";\r\n\r\n\r\nconst LiveSkillsIQ = () => {\r\n  const [rankings, setRankings] = useState([]);\r\n  const [scores, setScores] = useState({});\r\n  const [lastUpdate, setLastUpdate] = useState(new Date());\r\n  const [matches, setMatches] = useState([]);\r\n  const [teams, setTeams] = useState([]);\r\n  \r\n    const [showRankings, setShowRankings] = useState(false);\r\n  const [activeRounds, setActiveRounds] = useState([1]); // Start with Round 1 only\r\n  const socketRef = useRef(null);\r\n  const eventName = localStorage.getItem('selected_event_name');\r\n \r\n\r\n  const token = localStorage.getItem(\"access_token\");\r\n\r\n  const fetchRankings = async () => {\r\n    if (!eventName) {\r\n      console.error(\"No event name found\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios.get(`${process.env.REACT_APP_API_URL}/event/${eventName}/teamwork-rank`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n      console.log(\"API Response:\", response.data);\r\n      setRankings(response.data);\r\n      setShowRankings(true);\r\n    } catch (error) {\r\n      console.error(\"Error fetching rankings:\", error);\r\n      if (error.response) {\r\n        console.log(\"Error response data:\", error.response.data);\r\n        console.log(\"Error response status:\", error.response.status);\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    socketRef.current = new WebSocket(`wss://rpair.org/ws/competition_event/${eventName}/`);\r\n\r\n    socketRef.current.onopen = () => {\r\n      console.log(\"WebSocket connection established\");\r\n    };\r\n\r\n    socketRef.current.onmessage = (event) => {\r\n      const data = JSON.parse(event.data);\r\n      console.log(\"Score Update:\", data);\r\n\r\n      if (data.game_id && data.score !== undefined) {\r\n        setMatches(prevMatches => {\r\n          const matchIndex = prevMatches.findIndex(m => m.code === data.game_id);\r\n          if (matchIndex === -1) {\r\n            return [...prevMatches, {\r\n              code: data.game_id,\r\n              team1: data.team1_name || 'Team 1',\r\n              team2: data.team2_name || 'Team 2',\r\n              score: data.score,\r\n              round: data.round || 1\r\n            }];\r\n          }\r\n          const updatedMatches = [...prevMatches];\r\n          updatedMatches[matchIndex] = {\r\n            ...updatedMatches[matchIndex],\r\n            score: data.score\r\n          };\r\n          return updatedMatches;\r\n        });\r\n\r\n        setLastUpdate(new Date());\r\n\r\n        if (data.round && !activeRounds.includes(data.round)) {\r\n          setActiveRounds(prevRounds => [...prevRounds, data.round]);\r\n        }\r\n      }\r\n    };\r\n\r\n    socketRef.current.onerror = (error) => {\r\n      console.error(\"WebSocket error:\", error);\r\n    };\r\n\r\n    socketRef.current.onclose = () => {\r\n      console.log(\"WebSocket connection closed\");\r\n    };\r\n\r\n    return () => {\r\n      if (socketRef.current) {\r\n        socketRef.current.close();\r\n      }\r\n    };\r\n  }, [eventName, activeRounds]);\r\n\r\n   const getMedalIcon = (rank) => {\r\n      switch (rank) {\r\n        case 1:\r\n          return <FaMedal className=\"text-yellow-400 text-xl\" />;\r\n        case 2:\r\n          return <FaMedal className=\"text-gray-400 text-xl\" />;          \r\n        default:\r\n          return  <FaMedal className=\"text-yellow-700 text-xl\" />;\r\n      }\r\n    };\r\n\r\n  return (\r\n    <div className=\"p-4 max-w-7xl mx-auto flex flex-col items-center\">\r\n      <div className=\"text-center mb-6\">\r\n        <h1 className=\"text-3xl font-bold text-gray-800 mb-2\">Live Skills Matches</h1>\r\n        <p className=\"text-sm text-gray-600\">Last updated: {lastUpdate.toLocaleTimeString()}</p>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 gap-8 w-full max-w-4xl\">\r\n        {activeRounds.map((round) => (\r\n          <div key={round} className=\"bg-white rounded-lg shadow-lg p-10 w-full text-center\">\r\n            <h3 className=\"text-2xl font-bold mb-6\">Round {round}</h3>\r\n            <div className=\"overflow-x-auto\">\r\n              <table className=\"w-full\">\r\n                <thead>\r\n                  <tr className=\"bg-gray-100\">\r\n                    <th className=\"py-3 px-4 text-left text-lg\">Match Code</th>\r\n                    <th className=\"py-3 px-4 text-left text-lg\">Team</th>\r\n                    <th className=\"py-3 px-4 text-center text-lg\">Auto</th>\r\n                    <th className=\"py-3 px-4 text-center text-lg\">Driver</th>\r\n                    <th className=\"py-3 px-4 text-center text-lg\">Total</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {matches.filter(team => team.round === round).map((team) => (\r\n                    <tr key={team.code} className=\"border-b hover:bg-gray-50\">\r\n                      <td className=\"py-3 px-4 text-lg\">{team.code}</td>\r\n                      <td className=\"py-3 px-4 text-lg\">{team.team1}</td>\r\n                      <td className=\"py-3 px-4 text-center text-lg\">\r\n                        {team.score.autonomous > 0 ? (\r\n                          <span className=\"text-green-600 font-medium\">{team.score.autonomous}</span>\r\n                        ) : (\r\n                          <span className=\"text-gray-400\">-</span>\r\n                        )}\r\n                      </td>\r\n                      <td className=\"py-3 px-4 text-center text-lg\">\r\n                        {team.score.driver > 0 ? (\r\n                          <span className=\"text-blue-600 font-medium\">{team.score.driver}</span>\r\n                        ) : (\r\n                          <span className=\"text-gray-400\">-</span>\r\n                        )}\r\n                      </td>\r\n                      <td className=\"py-3 px-4 text-center text-lg font-bold\">\r\n                        {team.score.autonomous + team.score.driver > 0\r\n                          ? team.score.autonomous + team.score.driver\r\n                          : \"-\"}\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Show Rankings Button */}\r\n           \r\n             <div className=\"flex justify-center mt-6 mb-4\">\r\n              <button\r\n                onClick={fetchRankings}\r\n                className=\"inline-flex items-center px-4 py-2 text-sm sm:text-base font-medium text-white bg-yellow-500 rounded-lg hover:bg-yellow-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500 transition-colors gap-2\"\r\n              >\r\n                <FaTrophy className=\"text-lg\" /> \r\n                <span>View Ranking</span>\r\n              </button>\r\n            </div>\r\n      \r\n            {/* Rankings Table */}\r\n            {showRankings && (\r\n              <div className=\"mt-8\">\r\n                <div className=\"bg-white rounded-lg shadow-lg p-6\">\r\n                  <h2 className=\"text-2xl font-bold text-center mb-4 flex items-center justify-center gap-2\">\r\n                    <FaTrophy className=\"text-yellow-500\" />\r\n                    Team Rankings\r\n                  </h2>\r\n                  <div className=\"overflow-x-auto\">\r\n                    <table className=\"w-full\">\r\n                      <thead>\r\n                        <tr className=\"bg-gray-800 text-white\">\r\n                          <th className=\"py-3 px-4 text-left rounded-tl-lg\">Rank</th>\r\n                          <th className=\"py-3 px-4 text-left\">Team</th>\r\n                          <th className=\"py-3 px-4 text-center rounded-tr-lg\">Average Score</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {rankings.map((team, index) => (\r\n                          <tr\r\n                            key={team.team}\r\n                            className={`border-b ${\r\n                              index === 0\r\n                                ? \"bg-yellow-100\"\r\n                                : index === 1\r\n                                ? \"bg-gray-100\"\r\n                                : index === 2\r\n                                ? \"bg-yellow-50\"\r\n                                : \"bg-white\"\r\n                            } hover:bg-gray-50 transition-colors`}\r\n                          >\r\n                            <td className=\"py-3 px-4 flex items-center gap-2\">\r\n                              {getMedalIcon(index + 1)}\r\n                              {index + 1}\r\n                            </td>\r\n                            <td className=\"py-3 px-4 font-medium\">{team.team__name}</td>\r\n                            <td className=\"py-3 px-4 text-center font-bold\">{team.avg_score.toFixed(2)}</td>\r\n                          </tr>\r\n                        ))}\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LiveSkillsIQ;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["LiveSkillsIQ","rankings","setRankings","useState","scores","setScores","lastUpdate","setLastUpdate","Date","matches","setMatches","teams","setTeams","showRankings","setShowRankings","activeRounds","setActiveRounds","socketRef","useRef","eventName","localStorage","getItem","token","useEffect","current","WebSocket","onopen","console","log","onmessage","event","data","JSON","parse","game_id","undefined","score","prevMatches","matchIndex","findIndex","m","code","team1","team1_name","team2","team2_name","round","updatedMatches","includes","prevRounds","onerror","error","onclose","close","getMedalIcon","rank","_jsx","FaMedal","className","_jsxs","children","toLocaleTimeString","map","filter","team","autonomous","driver","onClick","async","response","axios","get","process","REACT_APP_API_URL","headers","Authorization","status","FaTrophy","index","team__name","avg_score","toFixed"],"sourceRoot":""}