{"version":3,"file":"static/js/995.4385d0d2.chunk.js","mappings":"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","sources":["pages/Dashboards/Judge/JudgeComp/Robotics/VexGO/matches/Solomatches.jsx"],"sourcesContent":["// import Alert from \"../../../../../../../components/Alert/Alert\";\r\n// import { useState, useEffect } from \"react\";\r\n// import { FaTrophy, FaCheck, FaPlay, FaFlagCheckered, FaChevronLeft, FaChevronRight, FaClock, FaPause, FaRedo } from \"react-icons/fa\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { useMatchContext } from './MatchContext';\r\n// import Back from \"../../../../../../../components/Back/Back\";\r\n\r\n\r\n// const SkillsGO = () => {\r\n//   const { matches, setCurrentMatch } = useMatchContext(); // Now this exists\r\n//   const [showRanking, setShowRanking] = useState(false);\r\n//   const [activeTab, setActiveTab] = useState('driving'); // 'driving' or 'coding'\r\n//   const [scores, setScores] = useState({});\r\n//   const [completedMatches, setCompletedMatches] = useState({});\r\n//   const [round, setRound] = useState(1);\r\n//   const [timeLeft, setTimeLeft] = useState(60);\r\n//   const [isRunning, setIsRunning] = useState(false);\r\n//   const navigate = useNavigate();\r\n\r\n//   // Players and matches for each round and mode\r\n//   const schedule = {\r\n//     driving: {\r\n//       1: [\r\n//         { id: 'd1', player: \"Driver 1\", team: \"Team A\" },\r\n//         { id: 'd2', player: \"Driver 2\", team: \"Team B\" },\r\n//         { id: 'd3', player: \"Driver 3\", team: \"Team C\" }\r\n//       ],\r\n//       2: [\r\n//         { id: 'd4', player: \"Driver 4\", team: \"Team D\" },\r\n//         { id: 'd5', player: \"Driver 5\", team: \"Team E\" },\r\n//         { id: 'd6', player: \"Driver 6\", team: \"Team F\" }\r\n//       ],\r\n//       3: [\r\n//         { id: 'd7', player: \"Driver 7\", team: \"Team G\" },\r\n//         { id: 'd8', player: \"Driver 8\", team: \"Team H\" },\r\n//         { id: 'd9', player: \"Driver 9\", team: \"Team I\" }\r\n//       ],\r\n//     },\r\n//     coding: {\r\n//       1: [\r\n//         { id: 'c1', player: \"Coder 1\", team: \"Team A\" },\r\n//         { id: 'c2', player: \"Coder 2\", team: \"Team B\" },\r\n//         { id: 'c3', player: \"Coder 3\", team: \"Team C\" }\r\n//       ],\r\n//       2: [\r\n//         { id: 'c4', player: \"Coder 4\", team: \"Team D\" },\r\n//         { id: 'c5', player: \"Coder 5\", team: \"Team E\" },\r\n//         { id: 'c6', player: \"Coder 6\", team: \"Team F\" }\r\n//       ],\r\n//       3: [\r\n//         { id: 'c7', player: \"Coder 7\", team: \"Team G\" },\r\n//         { id: 'c8', player: \"Coder 8\", team: \"Team H\" },\r\n//         { id: 'c9', player: \"Coder 9\", team: \"Team I\" }\r\n//       ],\r\n//     }\r\n//   };\r\n\r\n//   // Timer effect\r\n//   useEffect(() => {\r\n//     let interval;\r\n//     if (isRunning && timeLeft > 0) {\r\n//       interval = setInterval(() => {\r\n//         setTimeLeft((prev) => prev - 1);\r\n//       }, 1000);\r\n//     } else if (timeLeft === 0) {\r\n//       setIsRunning(false);\r\n//     }\r\n//     return () => clearInterval(interval);\r\n//   }, [isRunning, timeLeft]);\r\n\r\n//   const handleSaveScore = (matchId, score) => {\r\n//     setScores((prevScores) => ({\r\n//       ...prevScores,\r\n//       [matchId]: parseInt(score) || 0,\r\n//     }));\r\n//   };\r\n\r\n//    // Keep the existing handleStartMatch implementation\r\n//   const handleStartMatch = (match) => {\r\n//   setCurrentMatch({\r\n//     id: match.id, \r\n//     type: 'solo', \r\n//     team: match.team,\r\n//     challengeType: activeTab === 'driving' ? 'Driving Challenge' : 'Coding Challenge',\r\n//     mode: activeTab,\r\n//     round: round,\r\n//   });\r\n//   navigate(\"/SheetSolo\");\r\n// };\r\n\r\n  \r\n\r\n\r\n//  const handleCompleteMatch = (matchId) => {\r\n//     setCompletedMatches((prev) => ({\r\n//       ...prev,\r\n//       [matchId]: true,\r\n//     }));\r\n       \r\n//     Alert.confirm({\r\n//       title: 'Submit Final Score?',\r\n//       html: `<p>You're about to submit your final score of <strong>${scores[matchId] || 0}</strong> points.</p>`,\r\n//       confirmText: 'Confirm Submission',\r\n//       cancelText: 'Cancel',\r\n//       onConfirm: () => {\r\n//         Alert.success({\r\n//           title: 'Score Submitted!',\r\n//           text: 'Your results have been successfully recorded'\r\n//         });\r\n//       }\r\n//     });\r\n//     setIsRunning(false);\r\n//     setTimeLeft(60);\r\n//   };\r\n\r\n//   const handleFinishRound = () => {\r\n//     const currentRoundMatches = schedule[activeTab][round];\r\n//     const allMatchesCompleted = currentRoundMatches.every(\r\n//       (match) => completedMatches[match.id]\r\n//     );\r\n\r\n//     if (allMatchesCompleted) {\r\n//       if (round < 3) {\r\n//         setRound((prevRound) => prevRound + 1);\r\n//         setCompletedMatches({});\r\n//       } else {\r\n//         alert(`All ${activeTab} rounds completed!`);\r\n//       }\r\n//     } else {\r\n//       alert(\"Please complete all matches before finishing the round.\");\r\n//     }\r\n//   };\r\n\r\n//   const calculateRankings = () => {\r\n//     const allPlayers = [\r\n//       ...Object.values(schedule.driving).flat(),\r\n//       ...Object.values(schedule.coding).flat()\r\n//     ];\r\n    \r\n//     return allPlayers\r\n//       .map(player => ({\r\n//         ...player,\r\n//         score: scores[player.id] || 0,\r\n//         mode: player.id.startsWith('d') ? 'Driving' : 'Coding'\r\n//       }))\r\n//       .sort((a, b) => b.score - a.score);\r\n//   };\r\n\r\n//   const formatTime = (seconds) => {\r\n//     const mins = Math.floor(seconds / 60);\r\n//     const secs = seconds % 60;\r\n//     return `${mins}:${secs < 10 ? '0' : ''}${secs}`;\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\r\n//       {/* Header */}\r\n//       <Back />\r\n//       <div className=\"text-center mb-8\">\r\n//         <h1 className=\"text-3xl font-bold text-indigo-700 mb-2\">🏁 Skills Challenge</h1>\r\n        \r\n//         {/* Mode Tabs */}\r\n//         <div className=\"flex justify-center mb-6\">\r\n//           <div className=\"inline-flex rounded-md shadow-sm\">\r\n//             <button\r\n//               onClick={() => { setActiveTab('driving'); setRound(1); setCompletedMatches({}); }}\r\n//               className={`px-6 py-2 text-sm font-medium rounded-l-lg ${\r\n//                 activeTab === 'driving' \r\n//                   ? 'bg-indigo-600 text-white' \r\n//                   : 'bg-white text-indigo-600 hover:bg-gray-50'\r\n//               }`}\r\n//             >\r\n//               Driving Challenge\r\n//             </button>\r\n//             <button\r\n//               onClick={() => { setActiveTab('coding'); setRound(1); setCompletedMatches({}); }}\r\n//               className={`px-6 py-2 text-sm font-medium rounded-r-lg ${\r\n//                 activeTab === 'coding' \r\n//                   ? 'bg-indigo-600 text-white' \r\n//                   : 'bg-white text-indigo-600 hover:bg-gray-50'\r\n//               }`}\r\n//             >\r\n//               Coding Challenge\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n\r\n//         {/* Round Navigation */}\r\n//         <div className=\"flex justify-center items-center gap-4 mt-4\">\r\n//           <button\r\n//             onClick={() => setRound(prev => Math.max(1, prev - 1))}\r\n//             disabled={round === 1}\r\n//             className={`p-2 rounded-full ${round === 1 ? 'bg-gray-200 text-gray-400' : 'bg-indigo-100 text-indigo-700 hover:bg-indigo-200'}`}\r\n//           >\r\n//             <FaChevronLeft />\r\n//           </button>\r\n//           <span className=\"text-xl font-semibold bg-indigo-600 text-white px-4 py-2 rounded-full\">\r\n//             {activeTab === 'driving' ? 'Driving' : 'Coding'} Round {round}\r\n//           </span>\r\n//           <button\r\n//             onClick={() => setRound(prev => Math.min(3, prev + 1))}\r\n//             disabled={round === 3}\r\n//             className={`p-2 rounded-full ${round === 3 ? 'bg-gray-200 text-gray-400' : 'bg-indigo-100 text-indigo-700 hover:bg-indigo-200'}`}\r\n//           >\r\n//             <FaChevronRight />\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Timer\r\n//       <div className=\"flex justify-center mb-6\">\r\n//         <div className=\"bg-gray-100 p-4 rounded-lg flex items-center gap-4\">\r\n//           <div className=\"text-2xl font-mono font-bold\">{formatTime(timeLeft)}</div>\r\n//           <button\r\n//             onClick={() => setIsRunning(!isRunning)}\r\n//             className={`px-4 py-2 rounded-lg flex items-center ${\r\n//               isRunning \r\n//                 ? \"bg-yellow-500 hover:bg-yellow-600 text-white\" \r\n//                 : \"bg-green-600 hover:bg-green-700 text-white\"\r\n//             }`}\r\n//           >\r\n//             {isRunning ? <FaPause className=\"mr-2\" /> : <FaPlay className=\"mr-2\" />}\r\n//             {isRunning ? \"Pause\" : \"Start\"}\r\n//           </button>\r\n//           <button\r\n//             onClick={() => setTimeLeft(60)}\r\n//             className=\"px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg flex items-center\"\r\n//           >\r\n//             <FaRedo className=\"mr-2\" /> Reset\r\n//           </button>\r\n//         </div>\r\n//       </div> */}\r\n\r\n//       {/* Matches Table */}\r\n//       <div className=\"bg-white shadow-xl rounded-xl overflow-hidden mb-8\">\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"min-w-full divide-y divide-gray-200\">\r\n//             <thead className=\"bg-indigo-600 text-white\">\r\n//               <tr>\r\n//                 <th className=\"px-6 py-3 text-left\">Match ID</th>\r\n//                 <th className=\"px-6 py-3 text-left\">Team</th>\r\n//                 <th className=\"px-6 py-3 text-center\">Score</th>\r\n//                 <th className=\"px-6 py-3 text-center\">Time</th>\r\n//                 <th className=\"px-6 py-3 text-center\">Status</th>\r\n//                 <th className=\"px-6 py-3 text-center\">Actions</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody className=\"divide-y divide-gray-200\">\r\n//               {schedule[activeTab][round].map((match) => (\r\n//                 <tr \r\n//                   key={match.id} \r\n//                   className={completedMatches[match.id] ? \"bg-green-50\" : \"hover:bg-gray-50\"}\r\n//                 >\r\n//                   <td className=\"px-6 py-4 font-medium\">{match.id.toUpperCase()}</td>\r\n//                   <td className=\"px-6 py-4\">{match.team}</td>\r\n//                   <td className=\"px-6 py-4 text-center\">\r\n//           {matches[match.id]?.score || 0}\r\n//         </td>\r\n//         <td className=\"px-6 py-4 text-center\">\r\n//           {matches[match.id]?.totalTime ? formatTime(matches[match.id].totalTime) : '-'}\r\n//         </td>\r\n//                   <td className=\"px-6 py-4 text-center\">\r\n//                     <span className={`px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${\r\n//                       completedMatches[match.id] \r\n//                         ? \"bg-green-100 text-green-800\" \r\n//                         : \"bg-yellow-100 text-yellow-800\"\r\n//                     }`}>\r\n//                       {completedMatches[match.id] ? \"Completed\" : \"Pending\"}\r\n//                     </span>\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 text-center space-x-2\">\r\n//                    <button\r\n//                       onClick={() => handleStartMatch(match)}\r\n//                       disabled={completedMatches[match.id]}\r\n//                       className={`px-3 py-1 ${\r\n//                         completedMatches[match.id] \r\n//                           ? \"bg-gray-300 text-gray-600 cursor-not-allowed\" \r\n//                           : \"bg-blue-600 hover:bg-blue-700 text-white\"\r\n//                       } rounded-md text-sm`}\r\n//                     >\r\n//                       <FaPlay className=\"inline mr-1\" /> Start\r\n//                     </button>\r\n//                     <button\r\n//                       onClick={() => handleCompleteMatch(match.id)}\r\n//                       disabled={completedMatches[match.id]}\r\n//                       className={`px-3 py-1 rounded-md text-sm ${\r\n//                         completedMatches[match.id]\r\n//                           ? \"bg-gray-300 text-gray-600\"\r\n//                           : \"bg-green-600 hover:bg-green-700 text-white\"\r\n//                       }`}\r\n//                     >\r\n//                       <FaCheck className=\"inline mr-1\" /> Complete\r\n//                     </button>\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Round Controls */}\r\n//       <div className=\"flex justify-center gap-4 mb-8\">\r\n//         <button\r\n//           onClick={handleFinishRound}\r\n//           disabled={!schedule[activeTab][round].every(match => completedMatches[match.id])}\r\n//           className={`px-6 py-2 rounded-lg flex items-center ${\r\n//             schedule[activeTab][round].every(match => completedMatches[match.id])\r\n//               ? \"bg-green-600 hover:bg-green-700 text-white\"\r\n//               : \"bg-gray-300 text-gray-600 cursor-not-allowed\"\r\n//           }`}\r\n//         >\r\n//           <FaFlagCheckered className=\"mr-2\" />\r\n//           {round === 3 ? `Finish ${activeTab === 'driving' ? 'Driving' : 'Coding'}` : \"Finish Round\"}\r\n//         </button>\r\n        \r\n//         <button\r\n//           onClick={() => setShowRanking(!showRanking)}\r\n//           className=\"px-6 py-2 bg-yellow-500 hover:bg-yellow-600 text-white rounded-lg flex items-center\"\r\n//         >\r\n//           <FaTrophy className=\"mr-2\" />\r\n//           {showRanking ? \"Hide Rankings\" : \"Show Rankings\"}\r\n//         </button>\r\n//       </div>\r\n\r\n//       {/* Rankings Table */}\r\n//       {showRanking && (\r\n//         <div className=\"bg-white shadow-xl rounded-xl overflow-hidden mb-8\">\r\n//           <div className=\"px-6 py-4 bg-indigo-600 text-white flex items-center\">\r\n//             <FaTrophy className=\"mr-2\" />\r\n//             <h2 className=\"text-xl font-bold\">Overall Rankings</h2>\r\n//           </div>\r\n//           <div className=\"overflow-x-auto\">\r\n//             <table className=\"min-w-full divide-y divide-gray-200\">\r\n//               <thead className=\"bg-indigo-50\">\r\n//                 <tr>\r\n//                   <th className=\"px-6 py-3 text-left\">Rank</th>\r\n                  \r\n//                   <th className=\"px-6 py-3 text-left\">Team</th>\r\n//                   <th className=\"px-6 py-3 text-center\">Mode</th>\r\n//                   <th className=\"px-6 py-3 text-center\">Score</th>\r\n//                 </tr>\r\n//               </thead>\r\n//               <tbody className=\"divide-y divide-gray-200\">\r\n//                 {calculateRankings().map((player, index) => (\r\n//                   <tr key={player.id} className=\"hover:bg-gray-50\">\r\n//                     <td className=\"px-6 py-4 font-medium\">\r\n//                       {index + 1}\r\n//                       {index < 3 && (\r\n//                         <span className=\"ml-2\">\r\n//                           {index === 0 ? \"🥇\" : index === 1 ? \"🥈\" : \"🥉\"}\r\n//                         </span>\r\n//                       )}\r\n//                     </td>\r\n                    \r\n//                     <td className=\"px-6 py-4\">{player.team}</td>\r\n//                     <td className=\"px-6 py-4 text-center\">\r\n//                       <span className={`px-2 py-1 text-xs font-semibold rounded-full ${\r\n//                         player.mode === 'Driving' \r\n//                           ? 'bg-blue-100 text-blue-800' \r\n//                           : 'bg-purple-100 text-purple-800'\r\n//                       }`}>\r\n//                         {player.mode}\r\n//                       </span>\r\n//                     </td>\r\n//                     <td className=\"px-6 py-4 text-center font-bold text-indigo-600\">\r\n//                       {player.score}\r\n//                     </td>\r\n//                   </tr>\r\n//                 ))}\r\n//               </tbody>\r\n//             </table>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default SkillsGO;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport Alert from \"../../../../../../../components/Alert/Alert\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { FaTrophy, FaCheck, FaPlay, FaFlagCheckered, FaChevronLeft, FaChevronRight, FaClock, FaPause, FaRedo } from \"react-icons/fa\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useMatchContext } from './MatchContext';\r\nimport Back from \"../../../../../../../components/Back/Back\";\r\n\r\nconst SkillsGO = () => {\r\n  const { matches, setCurrentMatch } = useMatchContext();\r\n  const [showRanking, setShowRanking] = useState(false);\r\n  const [activeTab, setActiveTab] = useState('driving');\r\n  const [scores, setScores] = useState({});\r\n  const [completedMatches, setCompletedMatches] = useState({});\r\n  const [round, setRound] = useState(1);\r\n  const [timeLeft, setTimeLeft] = useState(60);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const schedule = {\r\n    driving: {\r\n      1: [\r\n        { id: 'd1', player: \"Driver 1\", team: \"Team A\" },\r\n        { id: 'd2', player: \"Driver 2\", team: \"Team B\" },\r\n        { id: 'd3', player: \"Driver 3\", team: \"Team C\" }\r\n      ],\r\n      2: [\r\n        { id: 'd4', player: \"Driver 4\", team: \"Team D\" },\r\n        { id: 'd5', player: \"Driver 5\", team: \"Team E\" },\r\n        { id: 'd6', player: \"Driver 6\", team: \"Team F\" }\r\n      ],\r\n      3: [\r\n        { id: 'd7', player: \"Driver 7\", team: \"Team G\" },\r\n        { id: 'd8', player: \"Driver 8\", team: \"Team H\" },\r\n        { id: 'd9', player: \"Driver 9\", team: \"Team I\" }\r\n      ],\r\n    },\r\n    coding: {\r\n      1: [\r\n        { id: 'c1', player: \"Coder 1\", team: \"Team A\" },\r\n        { id: 'c2', player: \"Coder 2\", team: \"Team B\" },\r\n        { id: 'c3', player: \"Coder 3\", team: \"Team C\" }\r\n      ],\r\n      2: [\r\n        { id: 'c4', player: \"Coder 4\", team: \"Team D\" },\r\n        { id: 'c5', player: \"Coder 5\", team: \"Team E\" },\r\n        { id: 'c6', player: \"Coder 6\", team: \"Team F\" }\r\n      ],\r\n      3: [\r\n        { id: 'c7', player: \"Coder 7\", team: \"Team G\" },\r\n        { id: 'c8', player: \"Coder 8\", team: \"Team H\" },\r\n        { id: 'c9', player: \"Coder 9\", team: \"Team I\" }\r\n      ],\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let interval;\r\n    if (isRunning && timeLeft > 0) {\r\n      interval = setInterval(() => {\r\n        setTimeLeft((prev) => prev - 1);\r\n      }, 1000);\r\n    } else if (timeLeft === 0) {\r\n      setIsRunning(false);\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [isRunning, timeLeft]);\r\n\r\n  const handleSaveScore = (matchId, score) => {\r\n    setScores((prevScores) => ({\r\n      ...prevScores,\r\n      [matchId]: parseInt(score) || 0,\r\n    }));\r\n  };\r\n\r\n  const handleStartMatch = (match) => {\r\n    setCurrentMatch({\r\n      id: match.id, \r\n      type: 'solo', \r\n      team: match.team,\r\n      challengeType: activeTab === 'driving' ? 'Driving Challenge' : 'Coding Challenge',\r\n      mode: activeTab,\r\n      round: round,\r\n    });\r\n    navigate(\"/SheetSolo\");\r\n  };\r\n\r\n  \r\n\r\n\r\n const handleCompleteMatch = (matchId) => {\r\n    const currentScore = matches[matchId]?.score || 0;\r\n       \r\n    Alert.confirm({\r\n      title: 'Submit Final Score?',\r\n      html: `<p>You're about to submit your final score of <strong>${currentScore}</strong> points.</p>`,\r\n      confirmText: 'Confirm Submission',\r\n      cancelText: 'Cancel',\r\n      onConfirm: () => {\r\n         setCompletedMatches((prev) => ({\r\n      ...prev,\r\n      [matchId]: true,\r\n    }));\r\n        Alert.success({\r\n          title: 'Score Submitted!',\r\n          text: 'Your results have been successfully recorded'\r\n        });\r\n      }\r\n    });\r\n    setIsRunning(false);\r\n    setTimeLeft(60);\r\n  };\r\n\r\n  const handleFinishRound = () => {\r\n    const currentRoundMatches = schedule[activeTab][round];\r\n    const allMatchesCompleted = currentRoundMatches.every(\r\n      (match) => completedMatches[match.id]\r\n    );\r\n\r\n    if (allMatchesCompleted) {\r\n      if (round < 3) {\r\n        setRound((prevRound) => prevRound + 1);\r\n        setCompletedMatches({});\r\n      } else {\r\n        alert(`All ${activeTab} rounds completed!`);\r\n      }\r\n    } else {\r\n      alert(\"Please complete all matches before finishing the round.\");\r\n    }\r\n  };\r\n\r\n  const calculateRankings = () => {\r\n    const allPlayers = [\r\n      ...Object.values(schedule.driving).flat(),\r\n      ...Object.values(schedule.coding).flat()\r\n    ];\r\n    \r\n    return allPlayers\r\n      .map(player => ({\r\n        ...player,\r\n        score: scores[player.id] || 0\r\n      }))\r\n      .sort((a, b) => b.score - a.score);\r\n  };\r\n\r\n  const formatTime = (seconds) => {\r\n    const mins = Math.floor(seconds / 60);\r\n    const secs = seconds % 60;\r\n    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto px-2 sm:px-4 py-4\">\r\n      {/* Header */}\r\n      <Back />\r\n      <div className=\"text-center mb-4\">\r\n        <h1 className=\"text-2xl font-bold text-indigo-700 mb-2\">🏁 Skills Challenge</h1>\r\n        \r\n        {/* Mode Tabs */}\r\n        <div className=\"flex justify-center mb-4\">\r\n          <div className=\"inline-flex rounded-md shadow-sm text-sm\">\r\n            <button\r\n              onClick={() => { setActiveTab('driving'); setRound(1); setCompletedMatches({}); }}\r\n              className={`px-4 py-2 text-sm font-medium rounded-l-lg ${\r\n                activeTab === 'driving' \r\n                  ? 'bg-indigo-600 text-white' \r\n                  : 'bg-white text-indigo-600 hover:bg-gray-50'\r\n              }`}\r\n            >\r\n              Driving\r\n            </button>\r\n            <button\r\n              onClick={() => { setActiveTab('coding'); setRound(1); setCompletedMatches({}); }}\r\n              className={`px-4 py-2 text-sm font-medium rounded-r-lg ${\r\n                activeTab === 'coding' \r\n                  ? 'bg-indigo-600 text-white' \r\n                  : 'bg-white text-indigo-600 hover:bg-gray-50'\r\n              }`}\r\n            >\r\n              Coding\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Round Navigation */}\r\n        <div className=\"flex justify-center items-center gap-2 mt-2\">\r\n          <button\r\n            onClick={() => setRound(prev => Math.max(1, prev - 1))}\r\n            disabled={round === 1}\r\n            className={`p-1 rounded-full ${round === 1 ? 'bg-gray-200 text-gray-400' : 'bg-indigo-100 text-indigo-700 hover:bg-indigo-200'}`}\r\n          >\r\n            <FaChevronLeft />\r\n          </button>\r\n          <span className=\"text-lg font-semibold bg-indigo-600 text-white px-3 py-1 rounded-full\">\r\n            {activeTab === 'driving' ? 'Driving' : 'Coding'} R{round}\r\n          </span>\r\n          <button\r\n            onClick={() => setRound(prev => Math.min(3, prev + 1))}\r\n            disabled={round === 3}\r\n            className={`p-1 rounded-full ${round === 3 ? 'bg-gray-200 text-gray-400' : 'bg-indigo-100 text-indigo-700 hover:bg-indigo-200'}`}\r\n          >\r\n            <FaChevronRight />\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Matches Table */}\r\n      <div className=\"bg-white shadow-md rounded-lg overflow-hidden mb-4\">\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"min-w-full divide-y divide-gray-200 text-sm\">\r\n            <thead className=\"bg-indigo-600 text-white\">\r\n              <tr>\r\n                <th className=\"px-3 py-2 text-left\">Match</th>\r\n                <th className=\"px-3 py-2 text-left\">Team</th>\r\n                <th className=\"px-3 py-2 text-center\">Score</th>\r\n                <th className=\"px-3 py-2 text-center\">Time</th>\r\n                <th className=\"px-3 py-2 text-center\">Status</th>\r\n                <th className=\"px-3 py-2 text-center\">Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"divide-y divide-gray-200\">\r\n              {schedule[activeTab][round].map((match) => (\r\n                <tr \r\n                  key={match.id} \r\n                  className={completedMatches[match.id] ? \"bg-green-50\" : \"hover:bg-gray-50\"}\r\n                >\r\n                  <td className=\"px-3 py-3 font-medium\">{match.id.toUpperCase()}</td>\r\n                  <td className=\"px-3 py-3\">{match.team}</td>\r\n                  <td className=\"px-3 py-3 text-center\">\r\n                    {matches[match.id]?.score || 0}\r\n                  </td>\r\n                  <td className=\"px-3 py-3 text-center\">\r\n                    {matches[match.id]?.totalTime ? formatTime(matches[match.id].totalTime) : '-'}\r\n                  </td>\r\n                  <td className=\"px-3 py-3 text-center\">\r\n                    <span className={`px-2 py-1 inline-flex text-xs leading-4 font-semibold rounded-full ${\r\n                      completedMatches[match.id] \r\n                        ? \"bg-green-100 text-green-800\" \r\n                        : \"bg-yellow-100 text-yellow-800\"\r\n                    }`}>\r\n                      {completedMatches[match.id] ? \"Done\" : \"Pending\"}\r\n                    </span>\r\n                  </td>\r\n                  <td className=\"px-3 py-3 text-center space-x-1\">\r\n                    <button\r\n                      onClick={() => handleStartMatch(match)}\r\n                      disabled={completedMatches[match.id]}\r\n                      className={`p-1 ${\r\n                        completedMatches[match.id] \r\n                          ? \"bg-gray-300 text-gray-600 cursor-not-allowed\" \r\n                          : \"bg-blue-600 hover:bg-blue-700 text-white\"\r\n                      } rounded text-xs`}\r\n                    >\r\n                      <FaPlay className=\"inline\" />\r\n                    </button>\r\n                    <button\r\n                      onClick={() => handleCompleteMatch(match.id)}\r\n                      disabled={completedMatches[match.id]}\r\n                      className={`p-1 rounded text-xs ${\r\n                        completedMatches[match.id]\r\n                          ? \"bg-gray-300 text-gray-600\"\r\n                          : \"bg-green-600 hover:bg-green-700 text-white\"\r\n                      }`}\r\n                    >\r\n                      <FaCheck className=\"inline\" />\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Round Controls */}\r\n      <div className=\"flex justify-center gap-2 mb-4\">\r\n        <button\r\n          onClick={handleFinishRound}\r\n          disabled={!schedule[activeTab][round].every(match => completedMatches[match.id])}\r\n          className={`px-4 py-2 rounded-lg flex items-center text-sm ${\r\n            schedule[activeTab][round].every(match => completedMatches[match.id])\r\n              ? \"bg-green-600 hover:bg-green-700 text-white\"\r\n              : \"bg-gray-300 text-gray-600 cursor-not-allowed\"\r\n          }`}\r\n        >\r\n          <FaFlagCheckered className=\"mr-1\" />\r\n          {round === 3 ? 'Finish' : \"Finish Round\"}\r\n        </button>\r\n        \r\n        <button\r\n          onClick={() => setShowRanking(!showRanking)}\r\n          className=\"px-4 py-2 bg-yellow-500 hover:bg-yellow-600 text-white rounded-lg flex items-center text-sm\"\r\n        >\r\n          <FaTrophy className=\"mr-1\" />\r\n          {showRanking ? \"Hide\" : \"Rankings\"}\r\n        </button>\r\n      </div>\r\n\r\n      {/* Rankings Table */}\r\n      {showRanking && (\r\n        <div className=\"bg-white shadow-md rounded-lg overflow-hidden mb-4\">\r\n          <div className=\"px-4 py-2 bg-indigo-600 text-white flex items-center\">\r\n            <FaTrophy className=\"mr-2\" />\r\n            <h2 className=\"text-lg font-bold\">Overall Rankings</h2>\r\n          </div>\r\n          <div className=\"overflow-x-auto\">\r\n            <table className=\"min-w-full divide-y divide-gray-200 text-sm\">\r\n              <thead className=\"bg-indigo-50\">\r\n                <tr>\r\n                  <th className=\"px-3 py-2 text-left\">Rank</th>\r\n                  <th className=\"px-3 py-2 text-left\">Team</th>\r\n                  <th className=\"px-3 py-2 text-center\">Score</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody className=\"divide-y divide-gray-200\">\r\n                {calculateRankings().map((player, index) => (\r\n                  <tr key={player.id} className=\"hover:bg-gray-50\">\r\n                    <td className=\"px-3 py-3 font-medium\">\r\n                      {index + 1}\r\n                      {index < 3 && (\r\n                        <span className=\"ml-1\">\r\n                          {index === 0 ? \"🥇\" : index === 1 ? \"🥈\" : \"🥉\"}\r\n                        </span>\r\n                      )}\r\n                    </td>\r\n                    <td className=\"px-3 py-3\">{player.team}</td>\r\n                    <td className=\"px-3 py-3 text-center font-bold text-indigo-600\">\r\n                      {player.score}\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SkillsGO;"],"names":["SkillsGO","matches","setCurrentMatch","useMatchContext","showRanking","setShowRanking","useState","activeTab","setActiveTab","scores","setScores","completedMatches","setCompletedMatches","round","setRound","timeLeft","setTimeLeft","isRunning","setIsRunning","navigate","useNavigate","schedule","driving","id","player","team","coding","useEffect","interval","setInterval","prev","clearInterval","formatTime","seconds","secs","Math","floor","_jsxs","className","children","_jsx","Back","onClick","max","disabled","FaChevronLeft","min","FaChevronRight","map","match","_matches$match$id","_matches$match$id2","toUpperCase","score","totalTime","type","challengeType","mode","handleStartMatch","FaPlay","matchId","_matches$matchId","currentScore","Alert","confirm","title","html","confirmText","cancelText","onConfirm","success","text","handleCompleteMatch","FaCheck","handleFinishRound","every","prevRound","alert","FaFlagCheckered","FaTrophy","Object","values","flat","sort","a","b","index"],"sourceRoot":""}