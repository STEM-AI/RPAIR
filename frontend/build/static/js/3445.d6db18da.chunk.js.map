{"version":3,"file":"static/js/3445.d6db18da.chunk.js","mappings":"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","sources":["../node_modules/jwt-decode/build/esm/index.js","pages/Auth/login.jsx"],"sourcesContent":["export class InvalidTokenError extends Error {\n}\nInvalidTokenError.prototype.name = \"InvalidTokenError\";\nfunction b64DecodeUnicode(str) {\n    return decodeURIComponent(atob(str).replace(/(.)/g, (m, p) => {\n        let code = p.charCodeAt(0).toString(16).toUpperCase();\n        if (code.length < 2) {\n            code = \"0\" + code;\n        }\n        return \"%\" + code;\n    }));\n}\nfunction base64UrlDecode(str) {\n    let output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n        case 0:\n            break;\n        case 2:\n            output += \"==\";\n            break;\n        case 3:\n            output += \"=\";\n            break;\n        default:\n            throw new Error(\"base64 string is not of the correct length\");\n    }\n    try {\n        return b64DecodeUnicode(output);\n    }\n    catch (err) {\n        return atob(output);\n    }\n}\nexport function jwtDecode(token, options) {\n    if (typeof token !== \"string\") {\n        throw new InvalidTokenError(\"Invalid token specified: must be a string\");\n    }\n    options || (options = {});\n    const pos = options.header === true ? 0 : 1;\n    const part = token.split(\".\")[pos];\n    if (typeof part !== \"string\") {\n        throw new InvalidTokenError(`Invalid token specified: missing part #${pos + 1}`);\n    }\n    let decoded;\n    try {\n        decoded = base64UrlDecode(part);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid base64 for part #${pos + 1} (${e.message})`);\n    }\n    try {\n        return JSON.parse(decoded);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid json for part #${pos + 1} (${e.message})`);\n    }\n}\n","import { useState, useEffect } from \"react\";\r\nimport { jwtDecode } from 'jwt-decode'; \r\nimport { FcGoogle } from \"react-icons/fc\";\r\nimport logo from \"../../assets/Static/logoWrite-re.png\";\r\nimport bgimg from \"../../assets/Static/bg.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { saveTokens, getTokens } from './auth';\r\nimport { VscEye, VscEyeClosed } from \"react-icons/vsc\";\r\nimport { Helmet } from \"react-helmet-async\";\r\n\r\nconst Login = () => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [passwordVisible, setPasswordVisible] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const { access_token } = getTokens();\r\n        if (access_token) {\r\n            navigate(\"/\", { replace: true });\r\n        }\r\n    }, [navigate]);\r\n const handlePasswordVisibility = () => {\r\n            setPasswordVisible(prevState => !prevState);\r\n          };\r\n    const signIn = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        if (!username || !password) {\r\n            setError(\"Username and password are required.\");\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            console.log(\"REACT_APP_API_URL_AUTH\" , process.env.REACT_APP_API_URL_AUTH);\r\n            const { data } = await axios.post(\r\n                `${process.env.REACT_APP_API_URL_AUTH}/login/`,\r\n                { username, password },\r\n                {\r\n                    headers: { \"Content-Type\": \"application/json\" },\r\n                    withCredentials: true\r\n                }\r\n            );\r\n\r\n            // Save both tokens using the auth utility\r\n            saveTokens({\r\n                access_token: data.access_token,\r\n                refresh_token: data.refresh_token\r\n            });\r\n\r\n            const decodedToken = jwtDecode(data.access_token);\r\n            localStorage.setItem(\"user_role\", JSON.stringify({\r\n                is_superuser: decodedToken?.is_superuser || false,\r\n                is_staff: decodedToken?.is_staff || false,\r\n            }));\r\n\r\n            navigate(\"/\", { replace: true }); \r\n\r\n        } catch (err) {\r\n            setError(err.response?.data?.detail || \"Login failed. Check your credentials.\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div\r\n            className=\"relative py-14 \"\r\n            style={{\r\n                backgroundImage: `url(${bgimg})`,\r\n                backgroundSize: \"cover\",\r\n                backgroundPosition: \"center\",\r\n            }}\r\n        >\r\n             <Helmet>\r\n                <title>Login</title>\r\n            </Helmet>\r\n            <div className=\"absolute bg-gray-50 inset-0 bg-opacity-50 z-0\"></div>\r\n            <div id=\"loginForm\" className=\"relative  flex bg-white rounded-2xl mb-10 shadow-lg overflow-hidden mx-auto max-w-sm lg:max-w-4xl\">\r\n                <div className=\"hidden lg:block lg:w-1/3 bg-cover bg-gradient-to-br from-cyan-800 to-cyan-400\">\r\n                    <div className=\"flex items-center py-16 flex-col\">\r\n                        <img src={logo} alt=\"Logo\" className=\"w-60\" />\r\n                        <Link\r\n                            to={\"/register\"}\r\n                            className=\"text-center text-white font-bold py-2 border border-white w-36 rounded-full\"\r\n                        >\r\n                            Sign Up\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n                <div className=\"w-full p-8 lg:w-1/2 flex flex-col mx-auto\">\r\n                    <h2 className=\"text-3xl font-bold text-gray-700 text-center pb-4\">Login</h2>\r\n                    <span className=\"border-b w-full \"></span>\r\n                    {/* <a\r\n                        href=\"#\"\r\n                        className=\"flex items-center justify-center mt-4 text-white rounded-lg shadow-md hover:bg-gray-100 transition-all duration-700 cursor-pointer\"\r\n                    >\r\n                        <div className=\"px-4 py-3\">\r\n                            <FcGoogle className=\"text-2xl\" />\r\n                        </div>\r\n                        <h1 className=\"px-4 py-3 w-5/6 text-center text-gray-600 font-bold\">\r\n                            Sign in with Google\r\n                        </h1>\r\n                    </a>\r\n                    <div className=\"mt-4 flex items-center justify-between\">\r\n                        <span className=\"border-b w-1/5 lg:w-1/4\"></span>\r\n                        <a href=\"#\" className=\"text-xs text-center text-gray-500 uppercase\">\r\n                            login with email\r\n                        </a>\r\n                        <span className=\"border-b w-1/5 lg:w-1/4\"></span>\r\n                    </div> */}\r\n\r\n                    <form className=\"mt-6\" onSubmit={signIn}>\r\n                        {error && <div className=\"mt-4 text-sm text-red-600\">{error}</div>}\r\n                        <div>\r\n                            <label className=\"block text-gray-700 text-sm font-bold mb-2\">\r\n                                User Name\r\n                            </label>\r\n                            <input\r\n                                className=\"bg-gray-200 text-gray-700 focus:outline-none focus:ring-2 focus:ring-cyan-600 focus:shadow-md border border-gray-300 rounded py-2 px-4 block w-full\"\r\n                                type=\"text\"\r\n                                placeholder=\"Enter your username\"\r\n                                value={username}\r\n                                onChange={(e) => setUsername(e.target.value)}\r\n                                required\r\n                            />\r\n                        </div>\r\n                        <div className=\"mt-4 relative\">\r\n                            <div className=\"flex justify-between \">\r\n                                <label className=\"block text-gray-700 text-sm font-bold mb-2\">\r\n                                    Password\r\n                                </label>\r\n                                <Link\r\n                                    to=\"/reset-password\"\r\n                                    className=\"text-xs text-cyan-500 hover:underline\"\r\n                                    aria-label=\"Forgot Password\"\r\n                                >\r\n                                    Forgot Password?\r\n                                </Link>\r\n                            </div>\r\n                            <input\r\n                                className=\"bg-gray-200 text-gray-700 focus:outline-none focus:ring-2 focus:ring-cyan-600 focus:shadow-md border border-gray-300 rounded py-2 px-4 block w-full\"\r\n\r\n                                type={passwordVisible ? 'text' : 'password'} \r\n                                placeholder=\"Enter your password\"\r\n                                value={password}\r\n                                onChange={(e) => setPassword(e.target.value)}\r\n                                required\r\n                            />\r\n                            <button className=\"absolute right-4 top-9 text-3xl\" type=\"button\" onClick={handlePasswordVisibility}>\r\n                                            {passwordVisible ? <VscEyeClosed />: <VscEye />}\r\n                                          </button>\r\n                        </div>\r\n                        \r\n                        <button\r\n                            type=\"submit\"\r\n                            className={`mt-8 font-bold py-2 px-4 w-full rounded ${\r\n                                loading\r\n                                    ? \"bg-gray-400 cursor-not-allowed\"\r\n                                    : \"bg-cyan-800 hover:bg-cyan-600\"\r\n                            } transition-all duration-700 cursor-pointer text-white`}\r\n                            disabled={loading}\r\n                        >\r\n                            {loading ? \"Logging in...\" : \"Login\"}\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n/*\r\nimport { useState, useEffect } from \"react\";\r\nimport { jwtDecode } from 'jwt-decode'; \r\nimport logo from \"../../assets/logo/logoWrite-re.png\";\r\nimport { FcGoogle } from \"react-icons/fc\";\r\nimport bgimg from \"../../assets/imgs/aboutus/bg.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { saveTokens, getTokens } from './auth';\r\nimport { VscEye, VscEyeClosed } from \"react-icons/vsc\";\r\nimport { GoogleLogin } from '@react-oauth/google';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst Login = () => {\r\n    const [formData, setFormData] = useState({\r\n        username: '',\r\n        password: ''\r\n    });\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [passwordVisible, setPasswordVisible] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const checkAuth = async () => {\r\n            const { access_token } = getTokens();\r\n            if (access_token) {\r\n                try {\r\n                    const decodedToken = jwtDecode(access_token);\r\n                    if (decodedToken.exp * 1000 > Date.now()) {\r\n                        navigate(\"/\", { replace: true });\r\n                    }\r\n                } catch (err) {\r\n                    localStorage.clear();\r\n                }\r\n            }\r\n        };\r\n        checkAuth();\r\n    }, [navigate]);\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData(prev => ({\r\n            ...prev,\r\n            [name]: value\r\n        }));\r\n        setError(null);\r\n    };\r\n\r\n    const handlePasswordVisibility = () => {\r\n        setPasswordVisible(prev => !prev);\r\n    };\r\n\r\n    const handleTokens = (tokens, decodedToken) => {\r\n        saveTokens(tokens);\r\n        localStorage.setItem(\"user_role\", JSON.stringify({\r\n            is_superuser: decodedToken?.is_superuser || false,\r\n            is_staff: decodedToken?.is_staff || false,\r\n        }));\r\n        toast.success('Login successful!');\r\n        navigate(\"/\", { replace: true });\r\n    };\r\n\r\n    const signIn = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        const { username, password } = formData;\r\n        if (!username || !password) {\r\n            setError(\"Username and password are required.\");\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const { data } = await axios.post(\r\n                `${process.env.REACT_APP_API_URL_AUTH}/login/`,\r\n                formData,\r\n                {\r\n                    headers: { \"Content-Type\": \"application/json\" },\r\n                    withCredentials: true\r\n                }\r\n            );\r\n\r\n            const decodedToken = jwtDecode(data.access_token);\r\n            handleTokens({\r\n                access_token: data.access_token,\r\n                refresh_token: data.refresh_token\r\n            }, decodedToken);\r\n\r\n        } catch (err) {\r\n            console.error(\"Login error:\", err.response || err);\r\n            const errorMessages = {\r\n                401: \"Invalid username or password. Please try again.\",\r\n                400: \"Invalid request. Please try again.\",\r\n                500: \"Server error. Please try again later.\",\r\n                0: \"Network error. Please check your internet connection.\"\r\n            };\r\n            setError(errorMessages[err.response?.status] || err.response?.data?.detail || \"Failed to login. Please try again.\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleGoogleSuccess = async (credentialResponse) => {\r\n        if (!credentialResponse?.credential) {\r\n            setError(\"No credentials received from Google. Please try again.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            setError(null);\r\n            setLoading(true);\r\n\r\n            const { data } = await axios.post(\r\n                `${process.env.REACT_APP_API_URL_AUTH}/google-login/`,\r\n                { id_token: credentialResponse.credential },\r\n                {\r\n                    headers: { \"Content-Type\": \"application/json\" },\r\n                    withCredentials: true\r\n                }\r\n            );\r\n\r\n            if (!data?.access_token || !data?.refresh_token) {\r\n                throw new Error(\"Invalid response from server: Missing tokens\");\r\n            }\r\n\r\n            const decodedToken = jwtDecode(data.access_token);\r\n            handleTokens({\r\n                access_token: data.access_token,\r\n                refresh_token: data.refresh_token\r\n            }, decodedToken);\r\n\r\n        } catch (err) {\r\n            console.error(\"Google login error:\", err);\r\n            \r\n            const errorMessages = {\r\n                404: \"Google login service is not available. Please try again later or contact support.\",\r\n                401: \"Your Google account is not authorized. Please use a different account or register first.\",\r\n                400: \"Invalid Google sign-in. Please try again or use email login.\",\r\n                500: \"Server error. Please try again later or contact support if the problem persists.\",\r\n                0: !navigator.onLine ? \"No internet connection. Please check your network and try again.\" : \"Failed to connect with Google.\"\r\n            };\r\n            \r\n            setError(errorMessages[err.response?.status] || err.response?.data?.detail || \"Failed to login with Google. Please try again or use email login.\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"relative py-14 \"\r\n            style={{\r\n                backgroundImage: `url(${bgimg})`,\r\n                backgroundSize: \"cover\",\r\n                backgroundPosition: \"center\",\r\n            }}\r\n        >\r\n            <div className=\"absolute bg-gray-50 inset-0 bg-opacity-50 z-0\"></div>\r\n            <div id=\"loginForm\" className=\"relative flex bg-white rounded-2xl mb-10 shadow-lg overflow-hidden mx-auto max-w-sm lg:max-w-4xl\">\r\n                <div className=\"hidden lg:block lg:w-1/3 bg-cover bg-gradient-to-br from-cyan-800 to-cyan-400\">\r\n                    <div className=\"flex items-center py-16 flex-col\">\r\n                        <img src={logo} alt=\"Logo\" className=\"w-60\" />\r\n                        <Link\r\n                            to={\"/register\"}\r\n                            className=\"text-center text-white font-bold py-2 border border-white w-36 rounded-full\"\r\n                        >\r\n                            Sign Up\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n                <div className=\"w-full p-8 lg:w-1/2 flex flex-col mx-auto\">\r\n                    <h2 className=\"text-3xl font-bold text-gray-700 text-center\">Login</h2>\r\n                    <div className=\"mt-4 flex items-center justify-center\">\r\n                        <GoogleLogin\r\n                            onSuccess={handleGoogleSuccess}\r\n                            onError={() => setError(\"Failed to connect with Google. Please try again.\")}\r\n                            type=\"standard\"\r\n                            theme=\"filled_blue\"\r\n                            size=\"large\"\r\n                            text=\"signin_with\"\r\n                            shape=\"rectangular\"\r\n                            width={320}\r\n                            disabled={loading}\r\n                        />\r\n                    </div>\r\n                    {error && (\r\n                        <div className=\"mt-4 text-sm text-center text-red-600 bg-red-50 p-2 rounded\">\r\n                            {error}\r\n                        </div>\r\n                    )}\r\n                    <div className=\"mt-4 flex items-center justify-between\">\r\n                        <span className=\"border-b w-1/5 lg:w-1/4\"></span>\r\n                        <a href=\"#\" className=\"text-xs text-center text-gray-500 uppercase\">\r\n                            or login with email\r\n                        </a>\r\n                        <span className=\"border-b w-1/5 lg:w-1/4\"></span>\r\n                    </div>\r\n\r\n                    <form className=\"mt-6\" onSubmit={signIn}>\r\n                        <div>\r\n                            <label className=\"block text-gray-700 text-sm font-bold mb-2\">\r\n                                User Name\r\n                            </label>\r\n                            <input\r\n                                className=\"bg-gray-200 text-gray-700 focus:outline-none focus:ring-2 focus:ring-cyan-600 focus:shadow-md border border-gray-300 rounded py-2 px-4 block w-full\"\r\n                                type=\"text\"\r\n                                name=\"username\"\r\n                                placeholder=\"Enter your username\"\r\n                                value={formData.username}\r\n                                onChange={handleInputChange}\r\n                                required\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"mt-4 relative\">\r\n                            <div className=\"flex justify-between\">\r\n                                <label className=\"block text-gray-700 text-sm font-bold mb-2\">\r\n                                    Password\r\n                                </label>\r\n                                <Link\r\n                                    to=\"/reset-password\"\r\n                                    className=\"text-xs text-cyan-500 hover:underline\"\r\n                                    aria-label=\"Forgot Password\"\r\n                                >\r\n                                    Forgot Password?\r\n                                </Link>\r\n                            </div>\r\n                            <input\r\n                                className=\"bg-gray-200 text-gray-700 focus:outline-none focus:ring-2 focus:ring-cyan-600 focus:shadow-md border border-gray-300 rounded py-2 px-4 block w-full\"\r\n                                type={passwordVisible ? 'text' : 'password'} \r\n                                name=\"password\"\r\n                                placeholder=\"Enter your password\"\r\n                                value={formData.password}\r\n                                onChange={handleInputChange}\r\n                                required\r\n                            />\r\n                            <button \r\n                                className=\"absolute right-4 top-9 text-3xl\" \r\n                                type=\"button\" \r\n                                onClick={handlePasswordVisibility}\r\n                            >\r\n                                {passwordVisible ? <VscEyeClosed /> : <VscEye />}\r\n                            </button>\r\n                        </div>\r\n                        \r\n                        <button\r\n                            type=\"submit\"\r\n                            className={`mt-8 font-bold py-2 px-4 w-full rounded ${\r\n                                loading\r\n                                    ? \"bg-gray-400 cursor-not-allowed\"\r\n                                    : \"bg-cyan-800 hover:bg-cyan-600\"\r\n                            } transition-all duration-700 cursor-pointer text-white`}\r\n                            disabled={loading}\r\n                        >\r\n                            {loading ? \"Logging in...\" : \"Login\"}\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n\r\n*/"],"names":["InvalidTokenError","Error","base64UrlDecode","str","output","replace","length","decodeURIComponent","atob","m","p","code","charCodeAt","toString","toUpperCase","b64DecodeUnicode","err","prototype","name","Login","username","setUsername","useState","password","setPassword","loading","setLoading","error","setError","passwordVisible","setPasswordVisible","navigate","useNavigate","useEffect","access_token","getTokens","_jsxs","className","style","backgroundImage","bgimg","backgroundSize","backgroundPosition","children","_jsx","Helmet","id","src","logo","alt","Link","to","onSubmit","async","e","preventDefault","console","log","process","REACT_APP_API_URL_AUTH","data","axios","post","headers","withCredentials","saveTokens","refresh_token","decodedToken","token","options","pos","header","part","split","decoded","message","JSON","parse","jwtDecode","localStorage","setItem","stringify","is_superuser","is_staff","_err$response","_err$response$data","response","detail","type","placeholder","value","onChange","target","required","onClick","handlePasswordVisibility","prevState","VscEyeClosed","VscEye","disabled"],"sourceRoot":""}